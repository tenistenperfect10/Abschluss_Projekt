Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"2a5a0352-c1fc-4577-97bb-f6fe21fc8e10\" name=\"Changes\" comment=\"Merge remote-tracking branch 'origin/main'\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/texttechnology/parliament_browser_6_4/controller/UserController.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/texttechnology/parliament_browser_6_4/data/Impl/InsightFactory_Impl.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/texttechnology/parliament_browser_6_4/data/Impl/User_Impl.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/texttechnology/parliament_browser_6_4/data/InsightFactory.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/texttechnology/parliament_browser_6_4/data/User.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/texttechnology/parliament_browser_6_4/helper/SessionsUtils.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/README.md\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/README.md\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/freemarker/speaker.ftl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/freemarker/speaker.ftl\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/freemarker/speech.ftl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/freemarker/speech.ftl\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/freemarker/userCenter.ftl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/freemarker/userCenter.ftl\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n        <option value=\"Interface\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"JpbToolWindowState\">\r\n    <option name=\"myId2FirstActivated\">\r\n      <map>\r\n        <entry key=\"com.haulmont.jpb.jpaStructure\" value=\"true\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"myId2Visible\">\r\n      <map>\r\n        <entry key=\"com.haulmont.jpb.jpaStructure\" value=\"false\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2dST5qYZ4hWPwSwCIImeIHd8m8U\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"dart.analysis.tool.window.visible\": \"false\",\r\n    \"last_opened_file_path\": \"C:/Users/liuhe/IdeaProjects/parliament_browser_6_4/src/main/resources\",\r\n    \"project.structure.last.edited\": \"Project\",\r\n    \"project.structure.proportion\": \"0.0\",\r\n    \"project.structure.side.proportion\": \"0.0\",\r\n    \"settings.editor.selected.configurable\": \"vcs.Subversion\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\liuhe\\IdeaProjects\\parliament_browser_6_4\\src\\main\\resources\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\liuhe\\IdeaProjects\\parliament_browser_6_4\\src\\main\\resources\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.SyncDBTask\">\r\n    <configuration name=\"DownloadTask\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"org.texttechnology.parliament_browser_6_4.task.DownloadTask\" />\r\n      <module name=\"parliament_browser_6_4\" />\r\n      <shortenClasspath name=\"ARGS_FILE\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"org.texttechnology.parliament_browser_6_4.task.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"SyncDBTask\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"org.texttechnology.parliament_browser_6_4.task.SyncDBTask\" />\r\n      <module name=\"parliament_browser_6_4\" />\r\n      <shortenClasspath name=\"ARGS_FILE\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"org.texttechnology.parliament_browser_6_4.task.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"Application\" factoryName=\"Application\">\r\n      <shortenClasspath name=\"ARGS_FILE\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.SyncDBTask\" />\r\n        <item itemvalue=\"Application.DownloadTask\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration>C:\\Users\\liuhe\\AppData\\Roaming\\Subversion</configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"2a5a0352-c1fc-4577-97bb-f6fe21fc8e10\" name=\"Changes\" comment=\"\" />\r\n      <created>1710000301853</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1710000301853</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Merge remote-tracking branch 'origin/main'\">\r\n      <created>1710267984584</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1710267984584</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Merge remote-tracking branch 'origin/main'\">\r\n      <created>1710268038325</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1710268038325</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Merge remote-tracking branch 'origin/main'\">\r\n      <created>1710329623912</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1710329623912</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Merge remote-tracking branch 'origin/main'\">\r\n      <created>1710332071795</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1710332071795</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Merge remote-tracking branch 'origin/main'\">\r\n      <created>1710357784362</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1710357784363</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"6\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Merge remote-tracking branch 'origin/main'\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Merge remote-tracking branch 'origin/main'\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 931768dfdc32ad80f911d9013d7a699f3f43f5de)
+++ b/.idea/workspace.xml	(date 1710407562363)
@@ -5,17 +5,12 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="2a5a0352-c1fc-4577-97bb-f6fe21fc8e10" name="Changes" comment="Merge remote-tracking branch 'origin/main'">
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/texttechnology/parliament_browser_6_4/controller/UserController.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/texttechnology/parliament_browser_6_4/data/Impl/InsightFactory_Impl.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/texttechnology/parliament_browser_6_4/data/Impl/User_Impl.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/texttechnology/parliament_browser_6_4/data/InsightFactory.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/texttechnology/parliament_browser_6_4/data/User.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/texttechnology/parliament_browser_6_4/helper/SessionsUtils.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/texttechnology/parliament_browser_6_4/controller/CommentController.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/texttechnology/parliament_browser_6_4/controller/LogController.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/texttechnology/parliament_browser_6_4/controller/MeetingController.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/texttechnology/parliament_browser_6_4/controller/SpeakerController.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/texttechnology/parliament_browser_6_4/controller/SpeechController.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/freemarker/speaker.ftl" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/freemarker/speaker.ftl" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/freemarker/speech.ftl" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/freemarker/speech.ftl" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/freemarker/userCenter.ftl" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/freemarker/userCenter.ftl" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -75,6 +70,9 @@
     </key>
     <key name="MoveFile.RECENT_KEYS">
       <recent name="C:\Users\liuhe\IdeaProjects\parliament_browser_6_4\src\main\resources" />
+    </key>
+    <key name="CopyClassDialog.RECENTS_KEY">
+      <recent name="org.texttechnology.parliament_browser_6_4.controller" />
     </key>
   </component>
   <component name="RunManager" selected="Application.SyncDBTask">
@@ -166,7 +164,14 @@
       <option name="project" value="LOCAL" />
       <updated>1710357784363</updated>
     </task>
-    <option name="localTasksCounter" value="6" />
+    <task id="LOCAL-00006" summary="Merge remote-tracking branch 'origin/main'">
+      <created>1710369657939</created>
+      <option name="number" value="00006" />
+      <option name="presentableId" value="LOCAL-00006" />
+      <option name="project" value="LOCAL" />
+      <updated>1710369657939</updated>
+    </task>
+    <option name="localTasksCounter" value="7" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
Index: src/main/java/org/texttechnology/parliament_browser_6_4/controller/MeetingController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/texttechnology/parliament_browser_6_4/controller/MeetingController.java b/src/main/java/org/texttechnology/parliament_browser_6_4/controller/MeetingController.java
new file mode 100644
--- /dev/null	(date 1710407562376)
+++ b/src/main/java/org/texttechnology/parliament_browser_6_4/controller/MeetingController.java	(date 1710407562376)
@@ -0,0 +1,90 @@
+package org.texttechnology.parliament_browser_6_4.controller;
+
+import freemarker.template.Configuration;
+import freemarker.template.SimpleHash;
+import freemarker.template.TemplateException;
+import org.bson.Document;
+import org.texttechnology.parliament_browser_6_4.data.InsightFactory;
+import org.texttechnology.parliament_browser_6_4.data.configuration.FreemarkerBasedRoute;
+import spark.Request;
+import spark.Response;
+import spark.Session;
+
+import java.io.IOException;
+import java.io.Writer;
+import java.util.List;
+
+import static spark.Spark.get;
+
+public class MeetingController {
+
+    private final InsightFactory insightFactory;
+
+    private final Configuration cfg;
+
+    public MeetingController(InsightFactory insightFactory, Configuration cfg)
+            throws IOException {
+        this.insightFactory = insightFactory;
+        this.cfg = cfg;
+        initializeRoutes();
+    }
+
+
+
+    private void initializeRoutes() throws IOException {
+
+        get("/", new FreemarkerBasedRoute("/", "index.ftl", cfg) {
+            @Override
+            public void doHandle(Request request, Response response, Writer writer)
+                    throws IOException, TemplateException {
+                Session session = request.session();
+                String username = session.attribute("username");
+                if (username == null) {
+                    response.redirect("/login");
+                    return;
+                }
+                Document document = insightFactory.queryExistUser(username);
+                if (document.get("userType", Integer.class).equals(1)) {
+                    response.redirect("/userCenter");
+                    return;
+                }
+
+                List<Document> lectureList = meetingDAO.findByDateDescending(10);
+                SimpleHash root = new SimpleHash();
+                session.attribute("canEdit", document.get("canEdit", Integer.class));
+
+                root.put("myLectures", lectureList);
+                this.getTemplate().process(root, writer);
+            }
+        });
+
+        get("/index", new FreemarkerBasedRoute("/index", "index.ftl", cfg) {
+            @Override
+            public void doHandle(Request request, Response response, Writer writer)
+                    throws IOException, TemplateException {
+                Session session = request.session();
+                String username = session.attribute("username");
+                if (username == null) {
+                    response.redirect("/login");
+                    return;
+                }
+                Document document = insightFactory.queryExistUser(username);
+                session.attribute("canEdit", document.get("canEdit", Integer.class));
+
+                this.getTemplate().process(null, writer);
+            }
+        });
+
+
+        // tells the user that the URL is dead
+        get("/data_not_found", new FreemarkerBasedRoute("/data_not_found", "data_not_found.ftl", cfg) {
+            @Override
+            protected void doHandle(Request request, Response response, Writer writer)
+                    throws IOException, TemplateException {
+                SimpleHash root = new SimpleHash();
+                this.getTemplate().process(root, writer);
+            }
+        });
+    }
+
+}
Index: src/main/java/org/texttechnology/parliament_browser_6_4/controller/SpeakerController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/texttechnology/parliament_browser_6_4/controller/SpeakerController.java b/src/main/java/org/texttechnology/parliament_browser_6_4/controller/SpeakerController.java
new file mode 100644
--- /dev/null	(date 1710407562383)
+++ b/src/main/java/org/texttechnology/parliament_browser_6_4/controller/SpeakerController.java	(date 1710407562383)
@@ -0,0 +1,155 @@
+package org.texttechnology.parliament_browser_6_4.controller;
+
+import cn.hutool.core.util.StrUtil;
+import cn.hutool.json.JSONNull;
+import cn.hutool.json.JSONObject;
+import cn.hutool.json.JSONUtil;
+import freemarker.template.Configuration;
+import freemarker.template.SimpleHash;
+import freemarker.template.TemplateException;
+import org.apache.commons.lang3.StringEscapeUtils;
+import org.bson.Document;
+import org.bson.types.ObjectId;
+import org.texttechnology.parliament_browser_6_4.data.InsightFactory;
+import org.texttechnology.parliament_browser_6_4.data.configuration.FreemarkerBasedRoute;
+import org.texttechnology.parliament_browser_6_4.helper.Result;
+import org.texttechnology.parliament_browser_6_4.helper.SessionsUtils;
+import spark.Request;
+import spark.Response;
+import spark.Session;
+
+import java.io.IOException;
+import java.io.Writer;
+import java.text.SimpleDateFormat;
+import java.util.*;
+
+import static spark.Spark.*;
+
+public class SpeakerController {
+
+    private final InsightFactory insightFactory;
+    private final Configuration cfg;
+
+    public SpeakerController(InsightFactory insightFactory, Configuration cfg) throws IOException {
+        this.insightFactory = insightFactory;
+        this.cfg = cfg;
+        initializeRoutes();
+    }
+
+    private void initializeRoutes() throws IOException {
+
+        before("/speaker/*", (request, response) -> {
+            Session session = request.session();
+            if (session.attribute("username") == null) {
+                response.redirect("/login");
+            }
+        });
+
+        get("/speaker", new FreemarkerBasedRoute("/speaker", "speaker.ftl", cfg) {
+            @Override
+            protected void doHandle(Request request, Response response, Writer writer)
+                    throws IOException, TemplateException {
+                SessionsUtils.redirectIfNotLogin(request, response);
+                Integer canEdit = SessionsUtils.getSessionByKey(request, "canEdit");
+                System.out.println(canEdit);
+
+                List<Document> speakerList = speakerDAO.findAll();
+
+                SimpleHash root = new SimpleHash();
+
+                root.put("speakerList", speakerList);
+                root.put("canEdit", canEdit);
+
+                this.getTemplate().process(root, writer);
+            }
+        });
+
+        get("/speakerDetail/:id", new FreemarkerBasedRoute("/speakerDetail/:id", "speakerDetail.ftl", cfg) {
+            @Override
+            protected void doHandle(Request request, Response response, Writer writer)
+                    throws IOException, TemplateException {
+
+                SessionsUtils.redirectIfNotLogin(request, response);
+
+                String id = StringEscapeUtils.escapeHtml4(request.params(":id"));
+                Document speaker = speakerDAO.findByIdAggregate(id);
+
+                SimpleHash root = new SimpleHash();
+
+                root.put("speaker", speaker);
+
+                this.getTemplate().process(root, writer);
+            }
+        });
+
+        post("/speaker/search", new FreemarkerBasedRoute("/speaker", "speaker.ftl", cfg) {
+            @Override
+            protected void doHandle(Request request, Response response, Writer writer)
+                    throws IOException, TemplateException {
+
+                SessionsUtils.redirectIfNotLogin(request, response);
+                Integer canEdit = SessionsUtils.getSessionByKey(request, "canEdit");
+
+                String id = StringEscapeUtils.escapeHtml4(request.queryParams("id"));
+                String name = StringEscapeUtils.escapeHtml4(request.queryParams("name"));
+                String firstName = StringEscapeUtils.escapeHtml4(request.queryParams("firstName"));
+                String fraction = StringEscapeUtils.escapeHtml4(request.queryParams("fraction"));
+                String party = StringEscapeUtils.escapeHtml4(request.queryParams("party"));
+
+                List<Document> speakerList = new ArrayList<>();
+                if(StrUtil.isNotBlank(id)){
+                    speakerList.add(speakerDAO.findById(id));
+                }else{
+                    speakerList.addAll(speakerDAO.search(name, firstName, fraction, party));
+                }
+
+                SimpleHash root = new SimpleHash();
+
+                root.put("speakerList", speakerList);
+                root.put("canEdit", canEdit);
+
+                this.getTemplate().process(root, writer);
+            }
+        });
+
+        post("/api/speaker/save", (request, response) -> {
+            response.type("application/json");
+            try {
+                JSONObject obj = JSONUtil.parseObj(request.body());
+                System.out.println(obj);
+                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
+                // 解析字符串并转换为Date对象
+                Date geburtsdatum = null;
+                Date sterbedatum = null;
+                if (!JSONNull.NULL.equals(obj.get("geburtsdatum"))) {
+                    geburtsdatum = sdf.parse((String) obj.remove("geburtsdatum"));
+                }
+                if (!JSONNull.NULL.equals(obj.get("sterbedatum"))) {
+                    sterbedatum =  sdf.parse((String) obj.remove("sterbedatum"));
+                }
+                Map<String, Object> fieldMap = new HashMap<>();
+                fieldMap.put("geburtsdatum", geburtsdatum);
+                fieldMap.put("sterbedatum", sterbedatum);
+
+                String speechID = obj.get("id", String.class);
+                System.out.println(speechID);
+                if (speechID != null) {
+                    System.out.println("update: " + speechID);
+                    obj.remove("id");
+                    speakerDAO.updateSpeakerById(new ObjectId(speechID), JSONUtil.toJsonStr(obj));
+                    speakerDAO.updateByFieldMap(speechID, fieldMap);
+                    return Result.buildSuccess();
+                }
+                System.out.println("end method now insert");
+                ObjectId id = speakerDAO.save(Document.parse(JSONUtil.toJsonStr(obj)));
+
+                speakerDAO.updateByFieldMap(id, fieldMap);
+                return Result.buildSuccess();
+            } catch (Exception e) {
+                e.printStackTrace();
+                System.out.println("error: " + e.getMessage());
+                return Result.buildError(e.getMessage());
+            }
+        });
+    }
+}
Index: src/main/java/org/texttechnology/parliament_browser_6_4/controller/SpeechController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/texttechnology/parliament_browser_6_4/controller/SpeechController.java b/src/main/java/org/texttechnology/parliament_browser_6_4/controller/SpeechController.java
new file mode 100644
--- /dev/null	(date 1710407562390)
+++ b/src/main/java/org/texttechnology/parliament_browser_6_4/controller/SpeechController.java	(date 1710407562390)
@@ -0,0 +1,234 @@
+package org.texttechnology.parliament_browser_6_4.controller;
+
+import cn.hutool.core.collection.CollUtil;
+import cn.hutool.core.date.DateUtil;
+import cn.hutool.core.util.StrUtil;
+import cn.hutool.json.JSONObject;
+import cn.hutool.json.JSONUtil;
+import com.mongodb.client.AggregateIterable;
+import freemarker.template.Configuration;
+import freemarker.template.SimpleHash;
+import freemarker.template.TemplateException;
+import org.apache.commons.lang3.StringEscapeUtils;
+import org.bson.Document;
+import org.texttechnology.parliament_browser_6_4.data.InsightFactory;
+import org.texttechnology.parliament_browser_6_4.data.configuration.FreemarkerBasedRoute;
+import org.texttechnology.parliament_browser_6_4.helper.Result;
+import org.texttechnology.parliament_browser_6_4.helper.SessionsUtils;
+import spark.Request;
+import spark.Response;
+
+import java.io.IOException;
+import java.io.Writer;
+import java.text.SimpleDateFormat;
+import java.util.*;
+
+import static spark.Spark.get;
+import static spark.Spark.post;
+
+public class SpeechController {
+
+    private final InsightFactory insightFactory;
+    private final Configuration cfg;
+
+    public SpeechController( InsightFactory insightFactory, Configuration cfg)
+            throws IOException {
+        this.insightFactory = insightFactory;
+        this.cfg = cfg;
+        initializeRoutes();
+    }
+
+    private void initializeRoutes() throws IOException {
+        get("/speech", new FreemarkerBasedRoute("/speech", "speech.ftl", cfg) {
+            @Override
+            protected void doHandle(Request request, Response response, Writer writer)
+                    throws IOException, TemplateException {
+                SessionsUtils.redirectIfNotLogin(request, response);
+                // 构建聚合查询
+                AggregateIterable<Document> speechList = speechDAO.aggregate();
+
+                SimpleHash root = new SimpleHash();
+
+                // 将AggregateIterable转换为List
+                List<Document> resultList = new ArrayList<>();
+                speechList.into(resultList);
+                System.out.println("total speech num is " + resultList.size());
+                // 转化为级联的多级菜单形式
+                Map<String, Map<String, List<Document>>> resultMap = convertCascadeMap(resultList);
+                root.put("speechMap", resultMap);
+//                root.put("speechList", resultList);
+
+                this.getTemplate().process(root, writer);
+            }
+        });
+
+        get("/speechDetail/:id", new FreemarkerBasedRoute("/speechDetail/:id", "speechDetail.ftl", cfg) {
+            @Override
+            protected void doHandle(Request request, Response response, Writer writer)
+                    throws IOException, TemplateException {
+
+                SessionsUtils.redirectIfNotLogin(request, response);
+                Integer canEdit = SessionsUtils.getSessionByKey(request, "canEdit");
+
+                String id = StringEscapeUtils.escapeHtml4(request.params(":id"));
+                Document speech = speechDAO.findById(id);
+
+                Document speaker = new Document();
+                if(StrUtil.isNotEmpty(speech.getString("speaker"))){
+                    speaker = speakerDAO.findById(speech.getString("speaker"));
+                }
+                List<String>  commentIds = speech.getList("comments", String.class);
+
+                List<Document> commentList = new ArrayList<>();
+                if(CollUtil.isNotEmpty(commentIds)){
+                    AggregateIterable<Document> aggregateIterable = commentDAO.findByIdsWithSpeaker(commentIds);
+                    aggregateIterable.into(commentList);
+                }
+                Date startDate = new Date(speech.get("starttime", Long.class));
+                Date endDate = new Date(speech.get("endtime", Long.class));
+
+                // 创建一个SimpleDateFormat对象，指定所需的格式
+                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm");
+
+                // 使用format方法将Date对象转换为字符串
+                String formattedStartDate = sdf.format(startDate);
+                String formattedEndDate = sdf.format(endDate);
+
+                SimpleHash root = new SimpleHash();
+
+                root.put("speech", speech);
+                root.put("speaker", speaker);
+                root.put("commentList", commentList);
+
+                root.put("startDate", formattedStartDate);
+                root.put("endDate", formattedEndDate);
+                root.put("canEdit", canEdit);
+
+                this.getTemplate().process(root, writer);
+            }
+        });
+
+        post("/speech/search", new FreemarkerBasedRoute("/speech", "speech.ftl", cfg) {
+            @Override
+            protected void doHandle(Request request, Response response, Writer writer)
+                    throws IOException, TemplateException {
+
+                SessionsUtils.redirectIfNotLogin(request, response);
+
+                String starttime = StringEscapeUtils.escapeHtml4(request.queryParams("startTime"));
+                String endtime = StringEscapeUtils.escapeHtml4(request.queryParams("endTime"));
+
+                Date startDate = null;
+                Date endDate = null;
+                String errorMsg = "";
+                if(StrUtil.isNotEmpty(starttime)){
+                    try {
+                        startDate = DateUtil.parse(starttime);
+                    }catch (Exception e){
+                        errorMsg += "Start time format error!";
+                    }
+                }
+                if(StrUtil.isNotEmpty(endtime)){
+                    try {
+                        endDate = DateUtil.parse(endtime);
+                    }catch (Exception e){
+                        errorMsg += "End time format error!";
+                    }
+                }
+
+                if(startDate != null && endDate != null && startDate.after(endDate)){
+                    errorMsg += "The start time cannot be greater than the end time!";
+                }
+                SimpleHash root = new SimpleHash();
+
+                if(StrUtil.isNotBlank(errorMsg)){
+                    root.put("errorMsg", errorMsg);
+                    this.getTemplate().process(root, writer);
+                    return;
+                }
+
+                AggregateIterable<Document> speechList = speechDAO.search(startDate, endDate);
+
+                // 将AggregateIterable转换为List
+                List<Document> resultList = new ArrayList<>();
+                speechList.into(resultList);
+                System.out.println("search speech num is " + resultList.size());
+                // 转化为级联的多级菜单形式
+                Map<String, Map<String, List<Document>>> resultMap = convertCascadeMap(resultList);
+
+                // 创建一个SimpleDateFormat对象，指定所需的格式
+                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm");
+
+                // 使用format方法将Date对象转换为字符串
+                String formattedStartDate = sdf.format(startDate);
+                String formattedEndDate = sdf.format(endDate);
+
+                root.put("speechMap", resultMap);
+                root.put("errorMsg", errorMsg);
+                root.put("startDate", formattedStartDate);
+                root.put("endDate", formattedEndDate);
+
+                this.getTemplate().process(root, writer);
+            }
+        });
+
+        get("/speech/query", new FreemarkerBasedRoute("/speech", "speech.ftl", cfg) {
+            @Override
+            protected void doHandle(Request request, Response response, Writer writer)
+                    throws IOException, TemplateException {
+
+                SessionsUtils.redirectIfNotLogin(request, response);
+                String keyword = request.queryParams("keyword");
+                List<Document> speeches = speechDAO.globalQueryByKeyword(keyword).into(new ArrayList<>());
+
+                Map<String, Map<String, List<Document>>> resultMap = convertCascadeMap(speeches);
+
+                SimpleHash root = new SimpleHash();
+                root.put("speechMap", resultMap);
+                this.getTemplate().process(root, writer);
+            }
+        });
+
+        post("/api/speech/update", (request, response) -> {
+            response.type("application/json");
+            try {
+                JSONObject obj = JSONUtil.parseObj(request.body());
+                String id = (String) obj.remove("_id");
+                boolean success = speechDAO.updateSpeechById(id, JSONUtil.toJsonStr(obj));
+                return success ? Result.buildSuccess() : Result.buildError();
+            } catch (Exception e) {
+                return Result.buildError(e.getMessage());
+            }
+        });
+
+    }
+
+    /**
+     * 转化为多级级联的map，用于折叠和展开显示
+     * @param resultList
+     * @return
+     */
+    private Map<String, Map<String, List<Document>>> convertCascadeMap(List<Document> resultList) {
+        Map<String, Map<String, List<Document>>> resultMap = new HashMap<>();
+        resultList.stream().forEach(result -> {
+            String key = result.getString("speakerId") + "&" + result.getString("speakerName");
+            if (!resultMap.containsKey(key)) {
+                Map<String, List<Document>> speakerMap = new HashMap<>();
+                List<Document> documents = new ArrayList<>();
+                documents.add(result);
+                speakerMap.put(result.getString("title"), documents);
+                resultMap.put(key, speakerMap);
+            } else {
+                Map<String, List<Document>> speakerMap = resultMap.get(key);
+                if (!speakerMap.containsKey(result.getString("title"))) {
+                    List<Document> documents = new ArrayList<>();
+                    documents.add(result);
+                    speakerMap.put(result.getString("title"), documents);
+                } else {
+                    speakerMap.get(result.getString("title")).add(result);
+                }
+            }
+        });
+        return resultMap;
+    }
+}
Index: src/main/java/org/texttechnology/parliament_browser_6_4/controller/CommentController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/texttechnology/parliament_browser_6_4/controller/CommentController.java b/src/main/java/org/texttechnology/parliament_browser_6_4/controller/CommentController.java
new file mode 100644
--- /dev/null	(date 1710407562341)
+++ b/src/main/java/org/texttechnology/parliament_browser_6_4/controller/CommentController.java	(date 1710407562341)
@@ -0,0 +1,23 @@
+package org.texttechnology.parliament_browser_6_4.controller;
+
+
+import freemarker.template.Configuration;
+import org.texttechnology.parliament_browser_6_4.data.InsightFactory;
+
+import java.io.IOException;
+
+public class CommentController {
+
+    private final InsightFactory insightFactory;
+    private final Configuration cfg;
+
+    public CommentController( InsightFactory insightFactory, Configuration cfg)
+            throws IOException {
+        this.insightFactory = insightFactory;
+        this.cfg = cfg;
+        initializeRoutes();
+    }
+
+    private void initializeRoutes() throws IOException {
+    }
+}
Index: src/main/java/org/texttechnology/parliament_browser_6_4/controller/LogController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/texttechnology/parliament_browser_6_4/controller/LogController.java b/src/main/java/org/texttechnology/parliament_browser_6_4/controller/LogController.java
new file mode 100644
--- /dev/null	(date 1710407562369)
+++ b/src/main/java/org/texttechnology/parliament_browser_6_4/controller/LogController.java	(date 1710407562369)
@@ -0,0 +1,75 @@
+package org.texttechnology.parliament_browser_6_4.controller;
+
+
+import freemarker.template.Configuration;
+import org.bson.Document;
+import org.bson.types.ObjectId;
+import org.texttechnology.parliament_browser_6_4.data.InsightFactory;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+import static spark.Spark.post;
+
+public class LogController {
+
+    private final InsightFactory insightFactory;
+    private final Configuration cfg;
+
+    public LogController(InsightFactory insightFactory, Configuration cfg)
+            throws IOException {
+        this.insightFactory = insightFactory;
+        this.cfg = cfg;
+        initializeRoutes();
+    }
+
+    private void initializeRoutes() throws IOException {
+
+        post("/logs", (request, response) -> {
+
+            // 构建响应数据（这里使用一个简单的示例）
+            List<Document> logList = logDAO.getLogs();
+
+            // 设置响应头
+            response.header("Content-Type", "application/json");
+
+            String json = convertListToJson(logList);
+            // 返回响应数据
+            return json;
+        });
+    }
+
+    private static String convertListToJson(List<Document> documents) {
+        List<String> jsonDocuments = new ArrayList<>();
+        Document firstDocument = documents.get(0);
+        List<String> fieldNames = new ArrayList<>(firstDocument.keySet());
+        List<String> quotedFieldNames = new ArrayList<>();
+
+        for (String fieldName : fieldNames) {
+            quotedFieldNames.add("\"" + fieldName + "\"");
+        }
+
+        for (Document document : documents) {
+            // 使用 LinkedHashMap 保持键值对的插入顺序
+            Map<String, Object> orderedMap = new LinkedHashMap<>(document);
+
+            // 处理 _id 字段，将 ObjectId 转换为字符串形式
+            ObjectId objectId = (ObjectId) orderedMap.get("_id");
+            orderedMap.put("_id", objectId.toString());
+
+            // 将 Map 转换为 JSON 字符串
+            String jsonDocument = new Document(orderedMap).toJson();
+            jsonDocuments.add(jsonDocument);
+        }
+
+        String header = String.join(",", quotedFieldNames);
+        String data = String.join(",", jsonDocuments);
+
+        String json = "{\"header\":[" + header + "], \"data\":" + "[" + data + "]" + "}";
+
+        return json;
+    }
+}
